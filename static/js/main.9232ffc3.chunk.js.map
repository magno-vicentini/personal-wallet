{"version":3,"sources":["reducers/user.js","actions/index.js","reducers/wallet.js","reducers/index.js","store/index.js","pages/Login.jsx","components/Header.jsx","components/Currency.jsx","components/Payment.jsx","components/Tag.jsx","components/TableThead.jsx","components/Table.jsx","components/InputValue.jsx","components/InputDesc.jsx","pages/Wallet.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","email","user","state","action","type","currencies","expenses","allCurrencies","wallet","Object","keys","data","filter","el","entries","reduce","acc","curr","objAdd","element","id","objDel","objEdit","sort","a","b","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Login","password","handleChange","bind","validation","target","name","value","this","setState","test","length","loginEmail","props","className","data-testid","onChange","placeholder","to","disabled","onClick","React","Component","connect","dispatch","loginUser","Header","sumTotalField","allExpenses","Number","exchangeRates","currency","ask","Currency","allCoins","changeInput","htmlFor","map","key","Payment","Tag","expenditure","TableThead","Table","deleteItem","expenseEditing","expense","description","tag","method","split","toFixed","deleteExpense","InputValue","InputDesc","desc","Wallet","isEditing","prevId","submitExpensis","fetchCurr","addExpense","editExp","defaultProps","undefined","fetch","then","response","json","getCurrency","addExpensis","editExpense","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9232ffc3.chunk.js","sourcesContent":["import { LOGIN_USER } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case LOGIN_USER:\n    return {\n      ...state,\n      email: action.email,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","// Coloque aqui suas actions\nexport const LOGIN_USER = 'LOGIN_USER';\nexport const REQUEST_API = 'REQUEST_API';\nexport const ADD_EXPENSES = 'ADD_EXPENSIS';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\n\nexport const getCurrency = (data) => ({\n  type: 'REQUEST_API',\n  data,\n});\n\nexport const loginUser = (email) => ({\n  type: LOGIN_USER,\n  email,\n});\n\nexport const addExpensis = (objAdd) => ({\n  type: ADD_EXPENSES,\n  objAdd,\n});\n\nexport const deleteExpense = (objDel) => ({\n  type: DELETE_EXPENSE,\n  objDel,\n});\n\nexport const editExpense = (objEdit) => ({\n  type: EDIT_EXPENSE,\n  objEdit,\n});\n\nexport function fetchCurrency() {\n  const CURR_API = 'https://economia.awesomeapi.com.br/json/all';\n  return (dispatch) => fetch(CURR_API)\n    .then((response) => response.json())\n    .then((data) => dispatch(getCurrency(data)));\n}\n","import {\n  REQUEST_API,\n  ADD_EXPENSES,\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  allCurrencies: [],\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state,\n      currencies: [...Object.keys(action.data)]\n        .filter((el) => el !== 'USDT'),\n      allCurrencies: [...Object.entries(action.data)]\n        .reduce((acc, curr) => ({ ...acc, [curr[0]]: curr[1] }), []),\n    };\n  case ADD_EXPENSES:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.objAdd],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((element) => element.id !== action.objDel.id),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses\n        .filter((element) => element.id !== action.objEdit.id), action.objEdit]\n        .sort((a, b) => a.id - b.id),\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst reducer = combineReducers({ user, wallet });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n// import { initialStateWithExpenses } from '../tests/mockData';\n\nconst store = createStore(\n  reducer,\n  // initialStateWithExpenses,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { loginUser } from '../actions';\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      password: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validation = this.validation.bind(this);\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  validation() {\n    const { email, password } = this.state;\n    const minPass = 5;\n    const regexEmail = /\\S+@\\S+\\.+com/;\n    if (regexEmail.test(email) && password.length > minPass) return false;\n    return true;\n  }\n\n  render() {\n    const { email, password } = this.state;\n    const { loginEmail } = this.props;\n    return (\n      <div className=\"login-container\">\n        <h1>Personal Wallet</h1>\n        <p>Sing Up</p>\n\n        <div className=\"card-input\">\n          <p>Email: </p>\n          <input\n            type=\"email\"\n            name=\"email\"\n            data-testid=\"email-input\"\n            value={ email }\n            onChange={ this.handleChange }\n            placeholder=\"example@example.com\"\n          />\n\n        </div>\n\n        <div className=\"card-input\">\n          <p>Password:</p>\n          <input\n            type=\"password\"\n            name=\"password\"\n            data-testid=\"password-input\"\n            value={ password }\n            onChange={ this.handleChange }\n          />\n          <Link to=\"/carteira\">\n            <button\n              type=\"submit\"\n              className={ (this.validation()) ? 'button-disable' : 'button-enable' }\n              disabled={ this.validation() }\n              onClick={ () => loginEmail(email) }\n            >\n              Entrar\n            </button>\n          </Link>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  loginEmail: (email) => dispatch(loginUser(email)),\n});\n\nLogin.propTypes = {\n  loginEmail: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.sumTotalField = this.sumTotalField.bind(this);\n  }\n\n  sumTotalField() {\n    const { allExpenses = 0 } = this.props;\n    const sum = allExpenses\n      .reduce((acc, curr) => acc\n        + (Number(curr.value) * curr.exchangeRates[curr.currency].ask), 0);\n    return sum;\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header className=\"header-container\">\n        <div className=\"field-container\">\n          <p>Despesa Total:</p>\n          <div data-testid=\"total-field\">{ `R$ ${this.sumTotalField()} ` }</div>\n          <div data-testid=\"header-currency-field\">BRL</div>\n        </div>\n        <div data-testid=\"email-field\" className=\"user\">{ email }</div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  allExpenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  allExpenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass Currency extends Component {\n  render() {\n    const { allCoins, changeInput } = this.props;\n    return (\n      <label htmlFor=\"currency\">\n        Moeda:\n        <select\n          name=\"currency\"\n          id=\"currency\"\n          data-testid=\"currency-input\"\n          onChange={ changeInput }\n        >\n          {\n            allCoins.map((curr) => (\n              <option key={ curr } data-testid={ curr } value={ curr }>\n                {curr}\n              </option>\n            ))\n          }\n        </select>\n      </label>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  allCoins: state.wallet.currencies,\n});\n\nCurrency.propTypes = {\n  allCoins: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object]).isRequired,\n  changeInput: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps)(Currency);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Payment extends Component {\n  render() {\n    const { changeInput } = this.props;\n    return (\n      <label htmlFor=\"method\">\n        Método de pagamento:\n        <select\n          name=\"method\"\n          id=\"method\"\n          onChange={ changeInput }\n          data-testid=\"method-input\"\n        >\n          <option>Dinheiro</option>\n          <option>Cartão de crédito</option>\n          <option>Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nPayment.propTypes = {\n  changeInput: PropTypes.func.isRequired,\n};\n\nexport default Payment;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Tag extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expenditure: ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'],\n    };\n  }\n\n  render() {\n    const { expenditure } = this.state;\n    const { changeInput } = this.props;\n    return (\n      <label htmlFor=\"tag\">\n        Tag:\n        <select\n          name=\"tag\"\n          id=\"tag\"\n          data-testid=\"tag-input\"\n          onChange={ changeInput }\n        >\n          { expenditure.map((el) => <option key={ el } value={ el }>{el}</option>)}\n        </select>\n      </label>\n    );\n  }\n}\n\nTag.propTypes = {\n  changeInput: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport '../styles/Wallet.css';\n\nexport default class TableThead extends Component {\n  render() {\n    return (\n      <thead>\n        <tr className=\"thead-expenses\">\n          <th className=\"column-thead\">Descrição</th>\n          <th className=\"column-thead\">Tag</th>\n          <th className=\"column-thead\">Método de pagamento</th>\n          <th className=\"column-thead\">Valor</th>\n          <th className=\"column-thead\">Moeda</th>\n          <th className=\"column-thead\">Câmbio utilizado</th>\n          <th className=\"column-thead\">Valor convertido</th>\n          <th className=\"column-thead\">Moeda de conversão</th>\n          <th className=\"column-thead\">Editar/Excluir</th>\n        </tr>\n      </thead>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TableThead from './TableThead';\nimport { deleteExpense } from '../actions';\n\nclass Table extends Component {\n  render() {\n    const { allExpenses, deleteItem, expenseEditing } = this.props;\n    return (\n      <table className=\"column-table\">\n        <TableThead />\n        <tbody>\n          { allExpenses.map((expense) => (\n            <tr key={ expense.id } className=\"row-expense\">\n              <td className=\"cell-tbody\">{expense.description}</td>\n              <td className=\"cell-tbody\">{expense.tag}</td>\n              <td className=\"cell-tbody\">{expense.method}</td>\n              <td className=\"cell-tbody\">{expense.value}</td>\n              <td className=\"cell-tbody\">\n                {expense.exchangeRates[expense.currency].name.split('/')[0]}\n              </td>\n              <td className=\"cell-tbody\">\n                {Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}\n              </td>\n              <td className=\"cell-tbody\">\n                {(expense.value * Number(expense.exchangeRates[expense.currency].ask))\n                  .toFixed(2)}\n              </td>\n              <td className=\"cell-tbody\">Real</td>\n              <td className=\"cell-tbody\">\n                <button\n                  type=\"button\"\n                  data-testid=\"edit-btn\"\n                  onClick={ () => expenseEditing(expense) }\n                >\n                  Editar\n                </button>\n                <button\n                  type=\"button\"\n                  data-testid=\"delete-btn\"\n                  onClick={ () => deleteItem(expense) }\n                >\n                  Excluir\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  allExpenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteItem: (objDel) => dispatch(deleteExpense(objDel)),\n});\n\nTable.propTypes = {\n  allExpenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteItem: PropTypes.func.isRequired,\n  expenseEditing: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputValue extends Component {\n  render() {\n    const { changeInput, value } = this.props;\n    return (\n      <label htmlFor=\"value\">\n        Valor:\n        <input\n          type=\"text\"\n          name=\"value\"\n          value={ value }\n          data-testid=\"value-input\"\n          onChange={ changeInput }\n        />\n      </label>\n    );\n  }\n}\n\nInputValue.propTypes = {\n  changeInput: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default InputValue;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputDesc extends Component {\n  render() {\n    const { changeInput, desc } = this.props;\n    return (\n      <label htmlFor=\"description\">\n        Descrição:\n        <input\n          type=\"text\"\n          name=\"description\"\n          value={ desc }\n          data-testid=\"description-input\"\n          onChange={ changeInput }\n        />\n      </label>\n    );\n  }\n}\n\nInputDesc.propTypes = {\n  changeInput: PropTypes.func.isRequired,\n  desc: PropTypes.string.isRequired,\n};\n\nexport default InputDesc;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { fetchCurrency, addExpensis, editExpense } from '../actions';\nimport Header from '../components/Header';\nimport Currency from '../components/Currency';\nimport Payment from '../components/Payment';\nimport Tag from '../components/Tag';\nimport Table from '../components/Table';\nimport InputValue from '../components/InputValue';\nimport InputDesc from '../components/InputDesc';\nimport '../styles/Wallet.css';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '0',\n      currency: 'USD',\n      description: '',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      isEditing: false,\n      prevId: 0,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.submitExpensis = this.submitExpensis.bind(this);\n    this.expenseEditing = this.expenseEditing.bind(this);\n  }\n\n  async componentDidMount() {\n    const { fetchCurr } = this.props;\n    await fetchCurr();\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  async submitExpensis() {\n    const { fetchCurr, allCoins, addExpense, editExp } = this.props;\n    const {\n      id, value, description, exchangeRates,\n      currency, method, tag, isEditing, prevId,\n    } = this.state;\n    if (isEditing) {\n      editExp({\n        id,\n        value,\n        description,\n        currency,\n        method,\n        tag,\n        exchangeRates,\n      });\n      return this.setState({\n        id: prevId,\n        value: '',\n        description: '',\n        isEditing: false,\n      });\n    }\n    await fetchCurr();\n\n    addExpense({\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates: allCoins,\n    });\n\n    return this.setState({\n      id: id + 1,\n      value: '',\n      description: '',\n    });\n  }\n\n  expenseEditing(expense) {\n    const { currency, description, value, method, tag, exchangeRates } = expense;\n    const { id } = this.state;\n    this.setState({\n      isEditing: true,\n      id: expense.id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n      prevId: id,\n    });\n  }\n\n  render() {\n    const { value, description, isEditing } = this.state;\n    return (\n      <div className=\"wallet-page\">\n        <Header />\n        <form action=\"\" className=\"form-expenses\">\n          <InputValue changeInput={ this.handleChange } value={ value } />\n          <InputDesc changeInput={ this.handleChange } desc={ description } />\n          <Currency changeInput={ this.handleChange } />\n          <Payment changeInput={ this.handleChange } />\n          <Tag changeInput={ this.handleChange } />\n          {\n            (!isEditing)\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"button-send\"\n                  onClick={ this.submitExpensis }\n                >\n                  Adicionar despesa\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"button-send\"\n                  onClick={ this.submitExpensis }\n                >\n                  Editar despesa\n                </button>\n              )\n          }\n\n        </form>\n        <Table expenseEditing={ this.expenseEditing } />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state,\n  allCoins: state.wallet.allCurrencies,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  fetchCurr: () => dispatch(fetchCurrency()),\n  addExpense: (objAdd) => dispatch(addExpensis(objAdd)),\n  editExp: (objEdit) => dispatch(editExpense(objEdit)),\n});\n\nWallet.defaultProps = {\n  allCoins: undefined,\n};\n\nWallet.propTypes = {\n  fetchCurr: PropTypes.func.isRequired,\n  addExpense: PropTypes.func.isRequired,\n  editExp: PropTypes.func.isRequired,\n  allCoins: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array,\n    PropTypes.object]),\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\"><Wallet /></Route>\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}